
#include <Windows.h>
#include <stdio.h>

// Step 1: Define the callback function for file change events
VOID CALLBACK FileChangeCallback(DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped);

int main()
{
    // Step 2: Specify the folder path to monitor
    LPCWSTR folderPath = L"C:\\Path\\To\\Folder";

    // Step 3: Create a directory handle for monitoring
    HANDLE hDirectory = CreateFile(
        folderPath,
        FILE_LIST_DIRECTORY,
        FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
        NULL,
        OPEN_EXISTING,
        FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OVERLAPPED,
        NULL
    );

    if (hDirectory == INVALID_HANDLE_VALUE)
    {
        printf("Failed to open directory: %d\n", GetLastError());
        return 1;
    }

    // Step 4: Create an event and associate it with the directory handle
    HANDLE hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
    FILE_NOTIFY_INFORMATION notifyBuffer[1024];
    DWORD dwBytesReturned = 0;

    // Step 5: Monitor the directory for changes
    BOOL bResult = ReadDirectoryChangesW(
        hDirectory,
        notifyBuffer,
        sizeof(notifyBuffer),
        TRUE,
        FILE_NOTIFY_CHANGE_FILE_NAME, // Monitor only file name changes
        &dwBytesReturned,
        &hEvent,
        &FileChangeCallback
    );

    if (!bResult)
    {
        printf("Failed to start directory monitoring: %d\n", GetLastError());
        CloseHandle(hDirectory);
        return 1;
    }

    printf("Monitoring directory for new files...\n");

    // Step 6: Enter the main loop to handle events
    while (1)
    {
        // Wait for the event to be signaled
        DWORD dwWaitResult = WaitForSingleObject(hEvent, INFINITE);

        if (dwWaitResult == WAIT_OBJECT_0)
        {
            // Event is signaled, handle the file change
            FileChangeCallback(0, 0, NULL);

            // Reset the event for the next change
            ResetEvent(hEvent);
        }
        else
        {
            // Error occurred or other wait result
            printf("WaitForSingleObject failed: %d\n", GetLastError());
            break;
        }
    }

    // Step 7: Clean up resources
    CloseHandle(hEvent);
    CloseHandle(hDirectory);

    return 0;
}

// Step 8: Implement the callback function to handle file change events
VOID CALLBACK FileChangeCallback(DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped)
{
    PFILE_NOTIFY_INFORMATION pNotify = (PFILE_NOTIFY_INFORMATION)lpOverlapped;
    WCHAR fileName[MAX_PATH];
    memset(fileName, 0, sizeof(fileName));

    while (pNotify)
    {
        memcpy(fileName, pNotify->FileName, pNotify->FileNameLength);
        wprintf(L"New file created: %s\n", fileName);
        pNotify = pNotify->NextEntryOffset > 0 ? (PFILE_NOTIFY_INFORMATION)((LPBYTE)pNotify + pNotify->NextEntryOffset) : NULL;
    }
}
